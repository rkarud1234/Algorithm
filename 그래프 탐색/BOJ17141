import java.io.*;
import java.util.*;

public class Main {

	private static int n, m, empty, min, idxV;
	private static int[][] map;
	private static boolean[] check;
	private static Point[] virus;
	private static boolean[][] visited;
	private static Queue<Point> q;
	private static boolean flag = false;

	private static int[][] move = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		empty = n * n;
		min = Integer.MAX_VALUE;

		virus = new Point[10];
		check = new boolean[10];
		idxV = 0;
		map = new int[n][n];
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1) {
					empty--;
				}
				if (map[i][j] == 2)
					virus[idxV++] = new Point(i, j);
			}
		} // end Input

		q = new LinkedList<>();

		selectV(0, 0);

//		if (m == empty) {
//			System.out.println("0");
//			return;
//		}

		if (flag)
			System.out.println(min);
		else
			System.out.println("-1");
	}

	private static void print() {
		// 디버깅용 코드
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (visited[i][j])
					System.out.print("2 ");
				else if (map[i][j] == 1)
					System.out.print("1 ");
				else
					System.out.print("0 ");
			}
			System.out.println();
		}
		System.out.println();
	}

	private static void bfs() {
		visited = new boolean[n][n];

		// 골라진 칸들을 큐에 다 넣는다.
		for (int i = 0; i < 10; i++) {
			if (check[i]) {
				Point p = virus[i];
				q.add(p);
				visited[p.i][p.j] = true;
			}
		}

		int time = -1;
		int currV = m;

		while (!q.isEmpty()) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				Point p = q.poll();
				// 해당 점으로 바이러스를 퍼트려나간다.
				for (int j = 0; j < 4; j++) {
					int ni = p.i + move[j][0];
					int nj = p.j + move[j][1];

					// 인덱스 초과 또는 빈칸 아닌경우 또는 이미 방문한곳
					if (ni < 0 || nj < 0 || ni >= n || nj >= n || map[ni][nj] == 1 || visited[ni][nj])
						continue;

					// 빈칸인 경우 바이러스를 퍼뜨린다.
					visited[ni][nj] = true;
					q.add(new Point(ni, nj));
					currV++;
				}
			}
			time++;
//			System.out.println("time:" + time);
//			print();
		}

		// 다 끝났는데 바이러스가 다 채워짐
		if (currV == empty) {
			flag = true;
			min = Math.min(min, time);
		}

	}

	private static void selectV(int cnt, int idx) {
		// '2'인 칸 중에 어떤 지점에 바이러스를 놓을지 결정
		if (cnt >= m) {
			// 모든 칸을 골랐다면 해당 칸으로 bfs를 수행하면 된다.
			bfs();
			return;
		}

		if (idx >= idxV)
			return;

		check[idx] = true;
		selectV(cnt + 1, idx + 1);
		check[idx] = false;
		selectV(cnt, idx + 1);
	}
}

class Point {
	int i, j;

	Point(int i, int j) {
		this.i = i;
		this.j = j;
	}
}
